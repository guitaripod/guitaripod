name: Update Recent Releases

on:
  release:
    types: [published]
  schedule:
    - cron: '0 * * * *'  # Runs at minute 0 of every hour
  workflow_dispatch:

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Fetch Recent Releases
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Function to extract release data from HTML section
            function extractReleaseData(section) {
              console.log('Raw section:', section); // Debug log
              
              const releases = [];
              // Extract lines from the <pre> tag
              const preMatch = section.match(/<pre[^>]*>([\s\S]*?)<\/pre>/);
              if (!preMatch) return releases;
              
              const lines = preMatch[1].split('\n').filter(line => line.trim());
              console.log(`Found ${lines.length} lines`); // Debug log
              
              for (const line of lines) {
                console.log('Processing line:', line); // Debug log
                
                // Parse compact format: <a href="...">RepoName</a> v1.0.0 [Lang] ‚≠êN ‚Ä¢ Description
                const repoMatch = line.match(/href="[^"]+">([^<]+)<\/a>/);
                const versionMatch = line.match(/<\/a>\s+([^\s]+)\s+\[/);
                const starsMatch = line.match(/‚≠ê(\d+)/);
                
                console.log('Extracted line data:', { // Debug log
                  repo: repoMatch?.[1],
                  version: versionMatch?.[1],
                  stars: starsMatch?.[1]
                });
                
                if (repoMatch && versionMatch) {
                  releases.push({
                    repo: repoMatch[1],
                    version: versionMatch[1],
                    stars: starsMatch ? parseInt(starsMatch[1]) : 0
                  });
                }
              }
              
              console.log('Final extracted releases:', releases); // Debug log
              return releases;
            }

            // Function to compare two release arrays with detailed logging
            function releasesAreDifferent(oldReleases, newReleases) {
              console.log('\nComparing releases:');
              console.log('Old releases:', JSON.stringify(oldReleases, null, 2));
              console.log('New releases:', JSON.stringify(newReleases, null, 2));
              
              if (oldReleases.length !== newReleases.length) {
                console.log(`Length mismatch: old=${oldReleases.length}, new=${newReleases.length}`);
                return true;
              }
              
              for (let i = 0; i < oldReleases.length; i++) {
                const old = oldReleases[i];
                const newR = newReleases[i];
                
                console.log(`\nComparing release ${i + 1}:`);
                console.log('Old:', old);
                console.log('New:', newR);
                
                if (old.repo !== newR.repo) {
                  console.log(`Repository changed: ${old.repo} -> ${newR.repo}`);
                  return true;
                }
                if (old.version !== newR.version) {
                  console.log(`Version changed for ${old.repo}: ${old.version} -> ${newR.version}`);
                  return true;
                }
                // Skip date comparison in compact format
                if (old.stars !== newR.stars) {
                  console.log(`Stars changed for ${old.repo}: ${old.stars} -> ${newR.stars}`);
                  return true;
                }
                
                console.log(`No changes detected for ${old.repo}`);
              }
              
              console.log('\nNo differences found between releases');
              return false;
            }
            
            // Read current README first
            console.log('Reading README...');
            let readme = fs.readFileSync('README.md', 'utf8');
            
            // Extract current releases section if it exists
            let originalSection = '';
            let currentReleases = [];
            if (readme.includes('<!-- Recent Releases -->')) {
              console.log('Found existing releases section');
              const start = readme.indexOf('<!-- Recent Releases -->');
              const end = readme.indexOf('<!-- End Recent Releases -->') + '<!-- End Recent Releases -->'.length;
              originalSection = readme.substring(start, end);
              currentReleases = extractReleaseData(originalSection);
              console.log('Extracted current releases:', currentReleases);
            } else {
              console.log('No existing releases section found');
            }
            
            console.log('Fetching repositories...');
            const repos = await github.rest.repos.listForUser({
              username: context.repo.owner,
              per_page: 100,
              sort: 'updated'
            });
            
            // Create a map to store latest release per repo
            let repoReleasesMap = new Map();
            
            // Fetch releases and additional repo data
            console.log(`\nFetching release data for ${repos.data.length} repositories...`);
            for (const repo of repos.data) {
              try {
                console.log(`\nProcessing ${repo.name}...`);
                const [releases, repoDetails] = await Promise.all([
                  github.rest.repos.listReleases({
                    owner: context.repo.owner,
                    repo: repo.name,
                    per_page: 1
                  }),
                  github.rest.repos.get({
                    owner: context.repo.owner,
                    repo: repo.name
                  })
                ]);
                
                if (releases.data.length > 0) {
                  const release = releases.data[0];
                  release.repo_name = repo.name;
                  release.language = repo.language;
                  release.stars = repoDetails.data.stargazers_count;
                  release.description = repoDetails.data.description;
                  repoReleasesMap.set(repo.name, release);
                  console.log(`Found release: ${release.name || release.tag_name}`);
                } else {
                  console.log('No releases found');
                }
              } catch (error) {
                console.log(`Error fetching data for ${repo.name}: ${error.message}`);
              }
            }
            
            // Convert map to array and sort by date
            let allReleases = Array.from(repoReleasesMap.values());
            allReleases.sort((a, b) => new Date(b.published_at) - new Date(a.published_at));
            allReleases = allReleases.slice(0, 20);
            console.log(`\nProcessed ${allReleases.length} most recent releases`);
            
            function formatDate(dateStr) {
              const date = new Date(dateStr);
              return date.toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
                year: 'numeric'
              });
            }
            
            // Prepare new section
            let newSection;
            let newReleasesData = [];
            
            if (allReleases.length === 0) {
              console.log('No releases found, creating empty section');
              newSection = [
                '\n<!-- Recent Releases -->',
                '<div style="width: 80%; text-align: right;">',
                '<h3>üì¶ Latest Releases</h3>',
                '<p>No releases yet</p>',
                '</div>',
                '<!-- End Recent Releases -->'
              ].join('\n');
            } else {
              // Transform the new releases into comparable format
              newReleasesData = allReleases.map(release => ({
                repo: release.repo_name,
                version: release.name || release.tag_name,
                stars: release.stars
              }));
              
              console.log('\nPreparing new releases data:', newReleasesData);
              
              // Shorten language names
              function shortLang(lang) {
                const langMap = {
                  'Swift': 'Swift',
                  'Go': 'Go',
                  'JavaScript': 'JS',
                  'TypeScript': 'TS',
                  'Python': 'Py',
                  'Rust': 'Rust',
                  'Java': 'Java',
                  'C++': 'C++',
                  'C': 'C',
                  'Ruby': 'Ruby',
                  'PHP': 'PHP',
                  'Kotlin': 'Kotlin',
                  'Dart': 'Dart',
                  'Lua': 'Lua'
                };
                return langMap[lang] || lang || 'N/A';
              }
              
              // Shorten descriptions to fit on one line
              function shortDesc(desc) {
                if (!desc) return '';
                // Remove common prefixes
                desc = desc.replace(/^A comprehensive Swift SDK for (the )?/i, '');
                desc = desc.replace(/^A Swift package (that |for )?/i, '');
                desc = desc.replace(/^Swift package for /i, '');
                desc = desc.replace(/^A Go SDK (and database )?for /i, '');
                desc = desc.replace(/^Go SDK for /i, '');
                desc = desc.replace(/^Native GTK4 /i, 'GTK4 ');
                desc = desc.replace(/^A browser extension that /i, '');
                desc = desc.replace(/^CLI client for /i, 'CLI for ');
                desc = desc.replace(/^Extension that /i, '');
                // Shorten long descriptions
                if (desc.length > 50) {
                  desc = desc.substring(0, 47) + '...';
                }
                return desc;
              }
              
              const releaseLines = allReleases.map(release => {
                const name = release.name || release.tag_name;
                const lang = shortLang(release.language);
                const desc = shortDesc(release.description);
                const stars = release.stars.toString();
                return `<a href="${release.html_url}">${release.repo_name}</a> ${name} [${lang}] ‚≠ê${stars}${desc ? ' ‚Ä¢ ' + desc : ''}`;
              }).join('\n');

              newSection = [
                '\n<!-- Recent Releases -->',
                '<div style="width: 80%; text-align: right;">',
                '<h3>üì¶ Latest Releases</h3>',
                '<pre style="text-align: left; margin-left: auto; font-size: 0.7em; line-height: 1.4;">',
                releaseLines,
                '</pre>',
                '</div>',
                '<!-- End Recent Releases -->\n'
              ].join('\n');
            }
            
            // Compare the actual release data instead of HTML content
            if (releasesAreDifferent(currentReleases, newReleasesData)) {
              console.log('\nChanges detected in release data, updating README...');
              // Update or append the section
              if (originalSection) {
                readme = readme.replace(originalSection, newSection);
                console.log('Updated existing section');
              } else {
                const insertPoint = readme.indexOf('![Profile views]');
                if (insertPoint !== -1) {
                  readme = readme.slice(0, insertPoint) + newSection + readme.slice(insertPoint);
                  console.log('Inserted new section before profile views');
                } else {
                  readme += newSection;
                  console.log('Appended new section at end of README');
                }
              }
              
              fs.writeFileSync('README.md', readme);
              fs.writeFileSync('changes_detected', 'true');
            } else {
              console.log('\nNo changes detected in release data, skipping update');
            }

      - name: Commit and Push if Changed
        run: |
          if [ -f changes_detected ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add README.md
            git commit -m "Update recent releases section"
            git push
            rm changes_detected
          else
            echo "No changes to commit"
          fi