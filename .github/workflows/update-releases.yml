name: Update Recent Releases

on:
  release:
    types: [published]
  schedule:
    - cron: '0 8 * * 0'  # Runs at 8:00 UTC every Sunday
  workflow_dispatch:

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Fetch Recent Releases
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Read current README first
            console.log('Reading README...');
            let readme = fs.readFileSync('README.md', 'utf8');
            
            console.log('Fetching repositories...');
            const repos = await github.rest.repos.listForUser({
              username: context.repo.owner,
              per_page: 100,
              sort: 'updated'
            });
            
            // Create a map to store latest release per repo
            let repoReleasesMap = new Map();
            
            // Fetch releases from all repos
            for (const repo of repos.data) {
              try {
                const releases = await github.rest.repos.listReleases({
                  owner: context.repo.owner,
                  repo: repo.name,
                  per_page: 1  // Only fetch the latest release
                });
                
                if (releases.data.length > 0) {
                  const release = releases.data[0];
                  release.repo_name = repo.name;
                  release.language = repo.language;
                  repoReleasesMap.set(repo.name, release);
                }
              } catch (error) {
                console.log(`Error fetching releases for ${repo.name}: ${error.message}`);
              }
            }
            
            // Convert map to array and sort by date
            let allReleases = Array.from(repoReleasesMap.values());
            allReleases.sort((a, b) => new Date(b.published_at) - new Date(a.published_at));
            allReleases = allReleases.slice(0, 5);
            
            function getLangIcon(lang) {
              const icons = {
                Swift: '🔶',
                Go: '🔵',
                Python: '🐍',
                Rust: '⚙️',
                'C++': '⚡',
                JavaScript: '💛',
                TypeScript: '💙',
                Java: '☕',
                Unknown: '📦'
              };
              return icons[lang] || '📦';
            }
            
            let newSection;
            if (allReleases.length === 0) {
              newSection = [
                '\n<!-- Recent Releases -->',
                '<div style="width: 60%; text-align: right;">',
                '<h3>📦 Latest Releases</h3>',
                '<p>No releases yet</p>',
                '</div>',
                '<!-- End Recent Releases -->'
              ].join('\n');
            } else {
              const tableRows = allReleases.map(release => {
                const name = release.name || release.tag_name;
                const date = new Date(release.published_at).toLocaleDateString();
                const langIcon = getLangIcon(release.language);
                return `<tr><td>${langIcon}</td><td><a href="${release.html_url}">${release.repo_name}</a></td><td>${name}</td><td>${date}</td></tr>`;
              }).join('\n');

              newSection = [
                '\n<!-- Recent Releases -->',
                '<div style="width: 60%; text-align: right;">',
                '<h3>📦 Latest Releases</h3>',
                '<table style="margin-left: auto;">',
                '<tbody>',
                tableRows,
                '</tbody>',
                '</table>',
                '</div>',
                '<!-- End Recent Releases -->\n'
              ].join('\n');
            }
            
            // Update or append the section
            if (readme.includes('<!-- Recent Releases -->')) {
              const start = readme.indexOf('<!-- Recent Releases -->');
              const end = readme.indexOf('<!-- End Recent Releases -->') + '<!-- End Recent Releases -->'.length;
              readme = readme.substring(0, start) + newSection + readme.substring(end);
            } else {
              // Find the position after the stats cards but before the profile views
              const insertPoint = readme.indexOf('![Profile views]');
              if (insertPoint !== -1) {
                readme = readme.slice(0, insertPoint) + newSection + readme.slice(insertPoint);
              } else {
                readme += newSection;
              }
            }
            
            console.log('Writing updated README...');
            fs.writeFileSync('README.md', readme);
            console.log('Done!');

      - name: Commit and Push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update recent releases section" || exit 0
          git push